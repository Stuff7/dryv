use crate::video::slice::{consts::*, Slice};

// Table 9-11 mb_type
pub const CTXIDX_MB_TYPE_SI_PRE: i16 = 0;
pub const CTXIDX_MB_TYPE_I: i16 = 3; // and SI suffix

pub const CTXIDX_MB_SKIP_FLAG_P: i16 = 11; // and SP
pub const CTXIDX_MB_TYPE_P_PRE: i16 = 14;
pub const CTXIDX_MB_TYPE_P_SUF: i16 = 17;
pub const CTXIDX_SUB_MB_TYPE_P: i16 = 21;

pub const CTXIDX_MB_SKIP_FLAG_B: i16 = 24;
pub const CTXIDX_MB_TYPE_B_PRE: i16 = 27;
pub const CTXIDX_MB_TYPE_B_SUF: i16 = 32;
pub const CTXIDX_SUB_MB_TYPE_B: i16 = 36;

pub const CTXIDX_MVD_X: i16 = 40;
pub const CTXIDX_MVD_Y: i16 = 47;

pub const CTXIDX_REF_IDX: i16 = 54;

pub const CTXIDX_MB_QP_DELTA: i16 = 60;
pub const CTXIDX_INTRA_CHROMA_PRED_MODE: i16 = 64;
pub const CTXIDX_PREV_INTRA_PRED_MODE_FLAG: i16 = 68;
pub const CTXIDX_REM_INTRA_PRED_MODE: i16 = 69;

pub const CTXIDX_MB_FIELD_DECODING_FLAG: i16 = 70;
pub const CTXIDX_CODED_BLOCK_PATTERN_LUMA: i16 = 73;
pub const CTXIDX_CODED_BLOCK_PATTERN_CHROMA: i16 = 77;

pub const CTXIDX_CODED_BLOCK_FLAG_CAT0: i16 = 85;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT1: i16 = 89;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT2: i16 = 93;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT3: i16 = 97;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT4: i16 = 101;

pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT0: i16 = 105;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT1: i16 = 120;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT2: i16 = 134;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT3: i16 = 149;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT4: i16 = 152;

pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT0: i16 = 166;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT1: i16 = 181;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT2: i16 = 195;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT3: i16 = 210;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT4: i16 = 213;

pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT0: i16 = 227;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT1: i16 = 237;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT2: i16 = 247;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT3: i16 = 257;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT4: i16 = 266;

pub const CTXIDX_TERMINATE: i16 = 276;

pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT0: i16 = 277;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT1: i16 = 292;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT2: i16 = 306;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT3: i16 = 321;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT4: i16 = 324;

pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT0: i16 = 338;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT1: i16 = 353;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT2: i16 = 367;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT3: i16 = 382;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT4: i16 = 385;

pub const CTXIDX_TRANSFORM_SIZE_8X8_FLAG: i16 = 399;

pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT5: i16 = 402;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT5: i16 = 417;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT5: i16 = 426;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT5: i16 = 436;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT5: i16 = 451;

pub const CTXIDX_CODED_BLOCK_FLAG_CAT6: i16 = 460;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT7: i16 = 464;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT8: i16 = 468;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT10: i16 = 472;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT11: i16 = 476;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT12: i16 = 480;

pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT6: i16 = 484;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT7: i16 = 499;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT8: i16 = 513;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT10: i16 = 528;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT11: i16 = 543;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT12: i16 = 557;

pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT6: i16 = 572;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT7: i16 = 587;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT8: i16 = 601;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT10: i16 = 616;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT11: i16 = 631;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT12: i16 = 645;

pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT9: i16 = 660;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT9: i16 = 675;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT9: i16 = 690;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT9: i16 = 699;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT9: i16 = 708;

pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT13: i16 = 718;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT13: i16 = 733;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT13: i16 = 748;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT13: i16 = 757;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT13: i16 = 766;

pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT6: i16 = 776;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT7: i16 = 791;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT8: i16 = 805;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT10: i16 = 820;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT11: i16 = 835;
pub const CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT12: i16 = 849;

pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT6: i16 = 864;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT7: i16 = 879;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT8: i16 = 893;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT10: i16 = 908;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT11: i16 = 923;
pub const CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT12: i16 = 937;

pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT6: i16 = 952;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT7: i16 = 962;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT8: i16 = 972;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT10: i16 = 982;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT11: i16 = 992;
pub const CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT12: i16 = 1002;

pub const CTXIDX_CODED_BLOCK_FLAG_CAT5: i16 = 1012;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT9: i16 = 1016;
pub const CTXIDX_CODED_BLOCK_FLAG_CAT13: i16 = 1020;

pub const RANGE_TAB_LPS: [[u8; 4]; 64] = [
  [128, 176, 208, 240],
  [128, 167, 197, 227],
  [128, 158, 187, 216],
  [123, 150, 178, 205],
  [116, 142, 169, 195],
  [111, 135, 160, 185],
  [105, 128, 152, 175],
  [100, 122, 144, 166],
  [95, 116, 137, 158],
  [90, 110, 130, 150],
  [85, 104, 123, 142],
  [81, 99, 117, 135],
  [77, 94, 111, 128],
  [73, 89, 105, 122],
  [69, 85, 100, 116],
  [66, 80, 95, 110],
  [62, 76, 90, 104],
  [59, 72, 86, 99],
  [56, 69, 81, 94],
  [53, 65, 77, 89],
  [51, 62, 73, 85],
  [48, 59, 69, 80],
  [46, 56, 66, 76],
  [43, 53, 63, 72],
  [41, 50, 59, 69],
  [39, 48, 56, 65],
  [37, 45, 54, 62],
  [35, 43, 51, 59],
  [33, 41, 48, 56],
  [32, 39, 46, 53],
  [30, 37, 43, 50],
  [29, 35, 41, 48],
  [27, 33, 39, 45],
  [26, 31, 37, 43],
  [24, 30, 35, 41],
  [23, 28, 33, 39],
  [22, 27, 32, 37],
  [21, 26, 30, 35],
  [20, 24, 29, 33],
  [19, 23, 27, 31],
  [18, 22, 26, 30],
  [17, 21, 25, 28],
  [16, 20, 23, 27],
  [15, 19, 22, 25],
  [14, 18, 21, 24],
  [14, 17, 20, 23],
  [13, 16, 19, 22],
  [12, 15, 18, 21],
  [12, 14, 17, 20],
  [11, 14, 16, 19],
  [11, 13, 15, 18],
  [10, 12, 15, 17],
  [10, 12, 14, 16],
  [9, 11, 13, 15],
  [9, 11, 12, 14],
  [8, 10, 12, 14],
  [8, 9, 11, 13],
  [7, 9, 11, 12],
  [7, 9, 10, 12],
  [7, 8, 10, 11],
  [6, 8, 9, 11],
  [6, 7, 9, 10],
  [6, 7, 8, 9],
  [2, 2, 2, 2],
];

pub const TRANS_IDX_LPS: [u8; 64] = [
  0, 0, 1, 2, 2, 4, 4, 5, 6, 7, 8, 9, 9, 11, 11, 12, 13, 13, 15, 15, 16, 16, 18, 18, 19, 19, 21,
  21, 22, 22, 23, 24, 24, 25, 26, 26, 27, 27, 28, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 33, 34,
  34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 63,
];

pub const TRANS_IDX_MPS: [u8; 64] = [
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
  51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 62, 63,
];

const fn mb_info<const N: usize>(elements: &'static [(u8, &[u8])]) -> [&'static [u8]; N] {
  let mut arr: [&[u8]; N] = [&[]; N];
  let mut i = 0;

  while i < elements.len() {
    let (index, value) = elements[i];
    arr[index as usize] = value;
    i += 1;
  }

  arr
}

pub const MB_PART_INFO: [&[u8]; 55] = mb_info(&[
  (MB_TYPE_P_L0_16X16, &[0, 1]),
  (MB_TYPE_B_L0_16X16, &[0, 1]),
  (MB_TYPE_B_L1_16X16, &[0, 2]),
  (MB_TYPE_B_BI_16X16, &[0, 3]),
  (MB_TYPE_P_L0_L0_16X8, &[1, 1, 1]),
  (MB_TYPE_B_L0_L0_16X8, &[1, 1, 1]),
  (MB_TYPE_B_L0_L1_16X8, &[1, 1, 2]),
  (MB_TYPE_B_L0_BI_16X8, &[1, 1, 3]),
  (MB_TYPE_B_L1_L0_16X8, &[1, 2, 1]),
  (MB_TYPE_B_L1_L1_16X8, &[1, 2, 2]),
  (MB_TYPE_B_L1_BI_16X8, &[1, 2, 3]),
  (MB_TYPE_B_BI_L0_16X8, &[1, 3, 1]),
  (MB_TYPE_B_BI_L1_16X8, &[1, 3, 2]),
  (MB_TYPE_B_BI_BI_16X8, &[1, 3, 3]),
  (MB_TYPE_P_L0_L0_8X16, &[2, 1, 1]),
  (MB_TYPE_B_L0_L0_8X16, &[2, 1, 1]),
  (MB_TYPE_B_L0_L1_8X16, &[2, 1, 2]),
  (MB_TYPE_B_L0_BI_8X16, &[2, 1, 3]),
  (MB_TYPE_B_L1_L0_8X16, &[2, 2, 1]),
  (MB_TYPE_B_L1_L1_8X16, &[2, 2, 2]),
  (MB_TYPE_B_L1_BI_8X16, &[2, 2, 3]),
  (MB_TYPE_B_BI_L0_8X16, &[2, 3, 1]),
  (MB_TYPE_B_BI_L1_8X16, &[2, 3, 2]),
  (MB_TYPE_B_BI_BI_8X16, &[2, 3, 3]),
]);

pub const SUB_MB_PART_INFO: [&[u8]; 17] = mb_info(&[
  (SUB_MB_TYPE_B_DIRECT_8X8, &[0, 0]),
  (SUB_MB_TYPE_P_L0_8X8, &[0, 1]),
  (SUB_MB_TYPE_B_L0_8X8, &[0, 1]),
  (SUB_MB_TYPE_B_L1_8X8, &[0, 2]),
  (SUB_MB_TYPE_B_BI_8X8, &[0, 3]),
  (SUB_MB_TYPE_P_L0_8X4, &[1, 1]),
  (SUB_MB_TYPE_B_L0_8X4, &[1, 1]),
  (SUB_MB_TYPE_B_L1_8X4, &[1, 2]),
  (SUB_MB_TYPE_B_BI_8X4, &[1, 3]),
  (SUB_MB_TYPE_P_L0_4X8, &[2, 1]),
  (SUB_MB_TYPE_B_L0_4X8, &[2, 1]),
  (SUB_MB_TYPE_B_L1_4X8, &[2, 2]),
  (SUB_MB_TYPE_B_BI_4X8, &[2, 3]),
  (SUB_MB_TYPE_P_L0_4X4, &[3, 1]),
  (SUB_MB_TYPE_B_L0_4X4, &[3, 1]),
  (SUB_MB_TYPE_B_L1_4X4, &[3, 2]),
  (SUB_MB_TYPE_B_BI_4X4, &[3, 3]),
]);

pub const CTXBLOCKCAT_LUMA_DC: u8 = 0;
pub const CTXBLOCKCAT_LUMA_AC: u8 = 1;
pub const CTXBLOCKCAT_LUMA_4X4: u8 = 2;
pub const CTXBLOCKCAT_CHROMA_DC: u8 = 3;
pub const CTXBLOCKCAT_CHROMA_AC: u8 = 4;

// 8x8 mode only
pub const CTXBLOCKCAT_LUMA_8X8: u8 = 5;
// 4:4:4 mode only

pub const CTXBLOCKCAT_CB_DC: u8 = 6;
pub const CTXBLOCKCAT_CB_AC: u8 = 7;
pub const CTXBLOCKCAT_CB_4X4: u8 = 8;
pub const CTXBLOCKCAT_CB_8X8: u8 = 9;
pub const CTXBLOCKCAT_CR_DC: u8 = 10;
pub const CTXBLOCKCAT_CR_AC: u8 = 11;
pub const CTXBLOCKCAT_CR_4X4: u8 = 12;
pub const CTXBLOCKCAT_CR_8X8: u8 = 13;

pub const LUMA_CAT_TAB: [[u8; 4]; 3] = [
  [
    CTXBLOCKCAT_LUMA_DC,
    CTXBLOCKCAT_LUMA_AC,
    CTXBLOCKCAT_LUMA_4X4,
    CTXBLOCKCAT_LUMA_8X8,
  ],
  [
    CTXBLOCKCAT_CB_DC,
    CTXBLOCKCAT_CB_AC,
    CTXBLOCKCAT_CB_4X4,
    CTXBLOCKCAT_CB_8X8,
  ],
  [
    CTXBLOCKCAT_CR_DC,
    CTXBLOCKCAT_CR_AC,
    CTXBLOCKCAT_CR_4X4,
    CTXBLOCKCAT_CR_8X8,
  ],
];

pub const CODED_BLOCK_FLAG_BASE_CTX: [i16; 14] = [
  CTXIDX_CODED_BLOCK_FLAG_CAT0,
  CTXIDX_CODED_BLOCK_FLAG_CAT1,
  CTXIDX_CODED_BLOCK_FLAG_CAT2,
  CTXIDX_CODED_BLOCK_FLAG_CAT3,
  CTXIDX_CODED_BLOCK_FLAG_CAT4,
  CTXIDX_CODED_BLOCK_FLAG_CAT5,
  CTXIDX_CODED_BLOCK_FLAG_CAT6,
  CTXIDX_CODED_BLOCK_FLAG_CAT7,
  CTXIDX_CODED_BLOCK_FLAG_CAT8,
  CTXIDX_CODED_BLOCK_FLAG_CAT9,
  CTXIDX_CODED_BLOCK_FLAG_CAT10,
  CTXIDX_CODED_BLOCK_FLAG_CAT11,
  CTXIDX_CODED_BLOCK_FLAG_CAT12,
  CTXIDX_CODED_BLOCK_FLAG_CAT13,
];

pub const SIGNIFICANT_COEFF_FLAG_BASE_CTX: [[[i16; 14]; 2]; 2] = [
  [
    [
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT0,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT1,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT2,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT3,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT4,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT5,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT6,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT7,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT8,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT9,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT10,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT11,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT12,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FRAME_CAT13,
    ],
    [
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT0,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT1,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT2,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT3,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT4,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT5,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT6,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT7,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT8,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT9,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT10,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT11,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT12,
      CTXIDX_SIGNIFICANT_COEFF_FLAG_FIELD_CAT13,
    ],
  ],
  [
    [
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT0,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT1,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT2,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT3,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT4,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT5,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT6,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT7,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT8,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT9,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT10,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT11,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT12,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FRAME_CAT13,
    ],
    [
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT0,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT1,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT2,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT3,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT4,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT5,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT6,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT7,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT8,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT9,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT10,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT11,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT12,
      CTXIDX_LAST_SIGNIFICANT_COEFF_FLAG_FIELD_CAT13,
    ],
  ],
];

pub const SIGNIFICANT_COEFF_FLAG_TAB8X8: [[u8; 3]; 63] = [
  [0, 0, 0],
  [1, 1, 1],
  [2, 1, 1],
  [3, 2, 1],
  [4, 2, 1],
  [5, 3, 1],
  [5, 3, 1],
  [4, 4, 1],
  [4, 5, 1],
  [3, 6, 1],
  [3, 7, 1],
  [4, 7, 1],
  [4, 7, 1],
  [4, 8, 1],
  [5, 4, 1],
  [5, 5, 1],
  [4, 6, 2],
  [4, 9, 2],
  [4, 10, 2],
  [4, 10, 2],
  [3, 8, 2],
  [3, 11, 2],
  [6, 12, 2],
  [7, 11, 2],
  [7, 9, 2],
  [7, 9, 2],
  [8, 10, 2],
  [9, 10, 2],
  [10, 8, 2],
  [9, 11, 2],
  [8, 12, 2],
  [7, 11, 2],
  [7, 9, 3],
  [6, 9, 3],
  [11, 10, 3],
  [12, 10, 3],
  [13, 8, 3],
  [11, 11, 3],
  [6, 12, 3],
  [7, 11, 3],
  [8, 9, 4],
  [9, 9, 4],
  [14, 10, 4],
  [10, 10, 4],
  [9, 8, 4],
  [8, 13, 4],
  [6, 13, 4],
  [11, 9, 4],
  [12, 9, 5],
  [13, 10, 5],
  [11, 10, 5],
  [6, 8, 5],
  [9, 13, 6],
  [14, 13, 6],
  [10, 9, 6],
  [9, 9, 6],
  [11, 10, 7],
  [12, 10, 7],
  [13, 14, 7],
  [11, 14, 7],
  [14, 14, 8],
  [10, 14, 8],
  [12, 14, 8],
];

pub const COEFF_ABS_LEVEL_MINUS1_BASE_CTX: [i16; 14] = [
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT0,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT1,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT2,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT3,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT4,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT5,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT6,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT7,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT8,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT9,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT10,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT11,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT12,
  CTXIDX_COEFF_ABS_LEVEL_MINUS1_PRE_CAT13,
];

pub enum ResidualBlock {
  Custom(*mut [i16; 16]),
  ChromaDc(usize),
  ChromaAc(usize, usize),
  LumaDc(usize),
  Luma8x8(usize, usize),
}

impl ResidualBlock {
  pub fn content<'a>(&'a mut self, slice: &'a mut Slice) -> &'a mut [i16] {
    match self {
      Self::Custom(slice) => unsafe { &mut **slice },
      Self::ChromaDc(i) => &mut slice.mb_mut().block_chroma_dc[*i],
      Self::ChromaAc(i, j) => &mut slice.mb_mut().block_chroma_ac[*i][*j],
      Self::LumaDc(i) => &mut slice.mb_mut().block_luma_dc[*i],
      Self::Luma8x8(i, j) => &mut slice.mb_mut().block_luma_8x8[*i][*j],
    }
  }
}
